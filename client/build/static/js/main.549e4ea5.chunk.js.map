{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","title","body","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","alert","finally","handleChange","target","name","value","submit","event","preventDefault","payload","url","method","restUserInputs","displayBlogPost","length","map","index","key","className","this","onSubmit","type","placeholder","onChange","cols","rows","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2SA0HeA,E,2MAtHbC,MAAQ,CACNC,MAAM,GACNC,KAAK,GACLC,MAAO,I,EAGTC,kBAAmB,WACjB,EAAKC,e,EAGPA,YAAc,WACZC,IAAMC,IAAI,QACPC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtB,EAAKC,SAAS,CAACR,MAAMO,IACrBE,QAAQC,IAAI,2BAA4BJ,MAEzCK,OAAM,WACLC,MAAM,+BAGPC,SAAQ,gB,EAKbC,aAAe,YAAe,IAAbC,EAAY,EAAZA,OACPC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACd,EAAKT,SAAL,eAAiBQ,EAAOC,K,EAG1BC,OAAQ,SAACC,GACPA,EAAMC,iBAEN,IAAMC,EAAU,CACdvB,MAAO,EAAKD,MAAMC,MAClBC,KAAM,EAAKF,MAAME,MAIrBI,IAAM,CACJmB,IAAI,YACJC,OAAQ,OACRhB,KAAMc,IAEPhB,MAAK,WACJI,QAAQC,IAAI,qCACZ,EAAKc,iBACL,EAAKtB,iBAGNS,OAAM,WACLF,QAAQC,IAAI,oB,EAKhBc,eAAiB,WACf,EAAKhB,SAAS,CACZV,MAAO,GACPC,KAAM,M,EAKV0B,gBAAkB,SAACzB,GAEjB,OAAKA,EAAM0B,OAEJ1B,EAAM2B,KAAI,SAAC3B,EAAO4B,GAAR,OACf,yBAAKC,IAAKD,EAAOE,UAAU,qBACzB,4BAAK9B,EAAMF,OACX,2BAAIE,EAAMD,UALY,M,wEAaxB,OAFEU,QAAQC,IAAI,QAASqB,KAAKlC,OAG1B,yBAAKiC,UAAU,OACb,mDACA,0BAAME,SAAWD,KAAKb,QACpB,yBAAKY,UAAU,cACb,2BACAG,KAAK,OACLjB,KAAK,QACLkB,YAAY,QACZjB,MAAOc,KAAKlC,MAAMC,MAClBqC,SAAUJ,KAAKjB,gBAMjB,yBAAKgB,UAAU,cACb,8BACAI,YAAY,OACZlB,KAAK,OACLoB,KAAK,KACLC,KAAK,KACLpB,MAAOc,KAAKlC,MAAME,KAClBoC,SAAUJ,KAAKjB,cANf,oBAWF,2CAEF,yBAAKgB,UAAU,aACZC,KAAKN,gBAAgBM,KAAKlC,MAAMG,a,GAhHzBsC,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.549e4ea5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';  \nclass App extends React.Component{\n  state = {\n    title:'',\n    body:'',\n    posts: []\n  };\n\n  componentDidMount= () => { \n    this.getBlogPost();\n  };\n\n  getBlogPost = () =>{\n    axios.get('/api')\n      .then((response) => {\n        const data = response.data;\n        this.setState({posts:data});\n        console.log('Data has been received!!', response);\n      })\n      .catch(() => {\n        alert('error retrieving data!!!');\n\n      })\n      .finally(function () {\n        // always executed\n      });\n  }\n  \n  handleChange = ({target}) => {\n    const { name, value } = target;\n    this.setState({ [name]: value});\n  };   \n  \n  submit =(event) => {\n    event.preventDefault(); // disable browser from refreshing\n\n    const payload = {\n      title: this.state.title,\n      body: this.state.body,\n    };\n  \n\n  axios({\n    url:'/api/save',  \n    method: 'POST',\n    data: payload\n  })\n  .then(() => {\n    console.log('Data has been sent to the server ');\n    this.restUserInputs();\n    this.getBlogPost();\n})\n\n  .catch(() => {\n    console.log('Server error');\n  });\n\n};\n\nrestUserInputs = () => {\n  this.setState({\n    title: \"\",\n    body: \"\",\n   //  posts: \"\",\n  });\n}; \n\ndisplayBlogPost = (posts) => {\n\n  if (!posts.length) return null;\n\n  return posts.map((posts, index)=>(\n    <div key={index} className=\"blog-post_display\">\n      <h3>{posts.title}</h3>\n      <p>{posts.body}</p>\n    </div>\n  ));\n \n}\n  render() {\n      console.log('State', this.state);\n    //return JSX\n    return (\n      <div className='app'>\n        <h1>Welcome To Pet Pose</h1>\n        <form onSubmit ={this.submit}>\n          <div className=\"form-input\">\n            <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            value={this.state.title} \n            onChange={this.handleChange}\n            />\n          </div>\n      \n\n          \n          <div className=\"form-input\">\n            <textarea \n            placeholder=\"Body\" \n            name=\"body\" \n            cols=\"30\"\n            rows=\"10\" \n            value={this.state.body} \n            onChange={this.handleChange}\n            >\n\\             </textarea>\n          </div>\n\n          <button>Submit</button>\n        </form>\n        <div className=\"blog-post\">\n          {this.displayBlogPost(this.state.posts)}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}